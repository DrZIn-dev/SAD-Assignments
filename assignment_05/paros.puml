@startuml Paros

' clear
class Paros {
    + {static} void main(String[] args)
    - void init(String[] args)
    - void run()
    - void runCommandLine()
    - void runGUI()
    - void showLicense()
    - void checkUpdate()
}
Paros ..> Constant
Paros ..> Model
Paros ..> View
Paros ..> Control

' clear
class Constant {
    {static} + String PROGRAM_NAME
    {static} + String PROGRAM_VERSION
    {static}+ String USER_AGENT
    {static} + String PROGRAM_TITLE
    + String ACCEPTED_LICENSE

    {static} + Constant getInstance()
    {static} + boolean isWindows() 
}

' clear
class Model {
    {static} - Model model
    - Session sessio
    - OptionsParam optionsParam
    - Database db

    {static} + Model getSingleton()
    + void init()
    + OptionsParam getOptionsParam()
    + Session getSession()
    + void setSession(Session paramSession) 
}
Model *-- OptionsParam
Model *-- Session
Model ..> Constant
Model ..> Database

' clear
class View {
    {static} + View getSingleton()
    + void postInit()
    + MainFrame getMainFrame()
    + void setStatus(String msg) 
}
class View implements ViewDelegate
View ..> Constant

' clear
class Control {
    {static} - Control control
    - Proxy proxy
    - MenuFileControl menuFileControl
    - MenuToolsControl menuToolsControl

    {static} + void initSingletonWithView()
    {static} + Control getSingleton()
    + void runCommandLineNewSession(String fileName)
    + void shutdown(boolean compact)
    + MenuFileControl getMenuFileControl()
    + MenuToolsControl getMenuToolsControl()
}
class Control extends AbstractControl
Control *-- Session
Control *-- Proxy
Control *-- MenuFileControl
Control *-- MenuToolsControl
Control ..> Model
Control ..> View

' clear
abstract class AbstractControl {
    - Model model
    - View view

    + ExtensionLoader getExtensionLoader()
}
AbstractControl ..> Model
AbstractControl ..> View

' clear
class OptionsParam {
    + void setGUI(boolean gui)
    + boolean isGUI()
    + ProxyParam getProxyParam()
    + void setProxyParam(ProxyParam proxyParam)
}
class OptionsParam extends AbstractParam
OptionsParam *-- ProxyParam

' clear
class Database {
    {static} - Database database
    {static} + Database getSingleton()
    - void setDatabaseServer(DatabaseServer databaseServer)
    + DatabaseServer getDatabaseServer()
}

' clear
class Session {
    - Model model
    - String fileName
    - String sessionDesc
    + void save(final String fileName, final SessionListener callback)
}
class Session extends FileXML
Session ..> Constant

' clear
class FileXML {
    # Document doc
    # DocumentBuilder docBuilder
    # DocumentBuilderFactory docBuilderFactory

    + Document getDocument()
    + Element getElement(Element base, String childTag)
    + Element getElement(String tag)
}

' clear
class AbstractParam {
    - FileConfiguration config

    + void load(FileConfiguration config)
    + void load(String fileName)
    + FileConfiguration getConfig()
}

' clear
class Proxy {
    - Model model
	- ProxyServer proxyServer
	- ProxyServerSSL proxyServerSSL

    + void startServer()
    + void stopServer() 
    + void setSerialize(boolean serialize)
}
Proxy ..> Model
Proxy *-- ProxyServer
Proxy *-- ProxyServerSSL

' clear
class MenuFileControl {
    - View view
    - Model model

    + void exit() 
    + void newSession(boolean isPromptNewSession)
    + void openSession()
}
MenuFileControl *-- Session

' clear
class MenuToolsControl {
    - View view
	- Model model
	- Control control

    + void options()
}

' clear
interface ViewDelegate {
    + MainFrame getMainFrame()    
    + SiteMapPanel getSiteTreePanel()    
    + OutputPanel getOutputPanel()    
    + int showConfirmDialog(String msg)
    + int showYesNoCancelDialog(String msg)    
    + void showWarningDialog(String msg)    
    + void showMessageDialog(String msg)    
    + WaitMessageDialog getWaitMessageDialog(String msg)    
    + MainPopupMenu getPopupMenu()    
    + void setStatus(String msg)    
    + HttpPanel getRequestPanel()    
    + HttpPanel getResponsePanel()
}

' clear
class HttpUtil {
    + {static} String encodeURI(String uri)
    + {static} void sleep(int ms)
    + {static} void closeServerSocket(ServerSocket socket)
}

' clear
class ProxyServer {
    # boolean isProxyRunning
    # ProxyParam proxyParam
    # boolean serialize

    + void run()
    # ProxyThread createProxyProcess(Socket clientSocket)
    + boolean isAnyProxyThreadRunning()
}
ProxyServer *-- ProxyParam
ProxyServer *-- ProxyThread
ProxyServer ..> HttpUtil

' clear
class ProxyServerSSL {
    - {static} SSLConnector ssl
    # ServerSocket createServerSocket(String ip, int port)
    # ProxyThread createProxyProcess(Socket clientSocket)
}
class ProxyServerSSL extends ProxyServer
ProxyServerSSL *-- ProxyThread

' clear
class ProxyParam {
    - String proxyIp
    - int proxyPort 
    - int proxySSLPort 
    - int useReverseProxy 

    # void parse()
    + String getProxyIp()
    + void setProxyIp(String proxyIp)
    + int getProxyPort()
}
class ProxyParam extends AbstractParam

' clear
class ProxyThread {
    # ProxyServer parentServer
    # ProxyParam proxyParam
    # ProxyThread originProcess

    + void start()
    - void beginSSL()
    + void run()
    # void processHttp(HttpRequestHeader requestHeader, boolean isSecure)
}

@enduml